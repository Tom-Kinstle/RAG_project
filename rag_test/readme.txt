{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8f417f39",
   "metadata": {},
   "outputs": [],
   "source": [
    "from langchain.vectorstores import FAISS\n",
    "from langchain_huggingface import HuggingFaceEmbeddings\n",
    "from langchain.schema import Document\n",
    "from langchain.text_splitter import RecursiveCharacterTextSplitter\n",
    "import torch\n",
    "import requests\n",
    "from typing import List\n",
    "\n",
    "# ✅ Remote HOA file URLs\n",
    "FILE_MAP = {\n",
    "    \"arroyo park\": \"https://raw.githubusercontent.com/Tom-Kinstle/RAG_project/main/rag_test/arroyo_park.txt\",\n",
    "    \"camino place\": \"https://raw.githubusercontent.com/Tom-Kinstle/RAG_project/main/rag_test/camino_place.txt\",\n",
    "    \"jackson oaks\": \"https://raw.githubusercontent.com/Tom-Kinstle/RAG_project/main/rag_test/jackson_oaks.txt\"\n",
    "}\n",
    "\n",
    "# 📋 Compliance questions\n",
    "QUESTIONS = [\n",
    "    \"How must HOA board elections be conducted under California law?\",\n",
    "    \"What voting methods are required for board elections?\",\n",
    "    \"What qualifications are required for board candidates?\",\n",
    "    \"What notice requirements exist for board meetings?\",\n",
    "    \"How are proxy votes handled in HOA elections?\",\n",
    "    \"What constitutes a quorum for member meetings?\",\n",
    "    \"How long do directors serve on the board?\",\n",
    "    \"Under what circumstances can a director be removed?\",\n",
    "    \"What are the assessment collection procedures?\",\n",
    "    \"How are architectural review requests processed?\",\n",
    "    \"What enforcement actions can the HOA take for violations?\",\n",
    "    \"What are the requirements for amending CC&Rs or bylaws?\"\n",
    "]\n",
    "\n",
    "# 🔧 Chunk configs\n",
    "CHUNK_CONFIGS = {\n",
    "    \"default\": {\"size\": 800, \"overlap\": 200},\n",
    "    \"small\": {\"size\": 400, \"overlap\": 100},\n",
    "    \"large\": {\"size\": 1200, \"overlap\": 300}\n",
    "}\n",
    "\n",
    "# ✅ E5-Base embedding setup\n",
    "def setup_embedding_model(silent: bool = False):\n",
    "    device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
    "    if not silent:\n",
    "        print(f\"🖥️ Using device: {device}\")\n",
    "    try:\n",
    "        return HuggingFaceEmbeddings(\n",
    "            model_name=\"intfloat/e5-base-v2\",\n",
    "            model_kwargs={\"device\": device},\n",
    "            encode_kwargs={\"normalize_embeddings\": True, \"batch_size\": 32}\n",
    "        )\n",
    "    except Exception as e:\n",
    "        print(f\"❌ Error loading E5: {e}\")\n",
    "        return None\n",
    "\n",
    "# 📄 Document prep (clean & chunked)\n",
    "def prepare_documents_enhanced(text: str, chunk_size: int, chunk_overlap: int) -> List[Document]:\n",
    "    lines = text.split('\\n')\n",
    "    cleaned_lines = []\n",
    "    skip_section = False\n",
    "\n",
    "    for line in lines:\n",
    "        if 'COMPLIANCE_QUESTIONS' in line or 'How must HOA board elections' in line:\n",
    "            skip_section = True\n",
    "            continue\n",
    "        if skip_section and (line.strip() == '' or line.startswith('    \"')):\n",
    "            continue\n",
    "        if skip_section and not line.startswith('    '):\n",
    "            skip_section = False\n",
    "        if not skip_section:\n",
    "            cleaned_lines.append(line)\n",
    "\n",
    "    cleaned_text = '\\n'.join(cleaned_lines)\n",
    "    if not cleaned_text.strip():\n",
    "        return []\n",
    "\n",
    "    splitter = RecursiveCharacterTextSplitter(\n",
    "        chunk_size=chunk_size,\n",
    "        chunk_overlap=chunk_overlap,\n",
    "        separators=[\"\\n=== \", \"\\nARTICLE \", \"\\nSECTION \", \"\\n\\n\", \"\\n\", \". \", \" \"],\n",
    "        length_function=len,\n",
    "        is_separator_regex=False,\n",
    "    )\n",
    "\n",
    "    raw_docs = splitter.create_documents([cleaned_text])\n",
    "    enhanced_docs = []\n",
    "\n",
    "    for i, doc in enumerate(raw_docs):\n",
    "        content = doc.page_content.lower()\n",
    "        metadata = {\n",
    "            \"chunk_id\": i,\n",
    "            \"chunk_size\": len(doc.page_content),\n",
    "            \"has_voting\": any(t in content for t in [\"vote\", \"ballot\", \"election\", \"poll\", \"voting\", \"electoral\"]),\n",
    "            \"has_proxy\": \"proxy\" in content,\n",
    "            \"has_director\": any(t in content for t in [\"director\", \"board\", \"officer\", \"president\", \"secretary\", \"treasurer\"]),\n",
    "            \"has_quorum\": \"quorum\" in content,\n",
    "            \"has_notice\": any(t in content for t in [\"notice\", \"notification\", \"notify\", \"inform\"]),\n",
    "            \"has_meeting\": any(t in content for t in [\"meeting\", \"assembly\", \"session\", \"gathering\"]),\n",
    "        }\n",
    "        enhanced_docs.append(Document(page_content=doc.page_content, metadata=metadata))\n",
    "\n",
    "    return enhanced_docs\n",
    "\n",
    "# 🧪 Relevance scorer (sample logic)\n",
    "def calculate_relevance_score(question: str, results: List[Document]) -> float:\n",
    "    if not results:\n",
    "        return 0.0\n",
    "    q_words = set(question.lower().split())\n",
    "    score = 0.0\n",
    "    for doc in results:\n",
    "        d_words = set(doc.page_content.lower().split())\n",
    "        overlap = len(q_words & d_words) / len(q_words)\n",
    "        score += overlap\n",
    "    return score / len(results)\n",
    "\n",
    "# 🏠 FAISS-only query runner\n",
    "def query_hoa_faiss(question_number: int, hoa_label: str, embed_model=None, chunk_config=\"default\"):\n",
    "    if embed_model is None:\n",
    "        embed_model = setup_embedding_model(silent=True)\n",
    "    if hoa_label.lower() not in FILE_MAP:\n",
    "        return {\"error\": f\"Invalid HOA label: {hoa_label}\"}\n",
    "    if chunk_config not in CHUNK_CONFIGS:\n",
    "        return {\"error\": f\"Unknown chunk config: {chunk_config}\"}\n",
    "    question = QUESTIONS[question_number - 1]\n",
    "    chunk_size = CHUNK_CONFIGS[chunk_config][\"size\"]\n",
    "    chunk_overlap = CHUNK_CONFIGS[chunk_config][\"overlap\"]\n",
    "\n",
    "    try:\n",
    "        url = FILE_MAP[hoa_label.lower()]\n",
    "        response = requests.get(url, timeout=30)\n",
    "        response.raise_for_status()\n",
    "        docs = prepare_documents_enhanced(response.text, chunk_size, chunk_overlap)\n",
    "        if not docs:\n",
    "            return {\"error\": \"No content after cleaning and chunking.\"}\n",
    "\n",
    "        vector_store = FAISS.from_documents(docs, embed_model)\n",
    "        retriever = vector_store.as_retriever(search_kwargs={\"k\": 3})\n",
    "        results = retriever.invoke(question)\n",
    "        score = calculate_relevance_score(question, results)\n",
    "        answer = results[0].page_content.strip() if results else \"No answer found\"\n",
    "        return {\"answer\": answer, \"score\": score}\n",
    "    except Exception as e:\n",
    "        return {\"error\": str(e)}\n",
    "\n",
    "# ⚡ Quick wrapper\n",
    "def quick_query(question_number: int, hoa_label: str, chunk_config=\"default\", embed_model=None):\n",
    "    return query_hoa_faiss(question_number, hoa_label, embed_model, chunk_config)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5c94d5fd",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'setup_faiss_store' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mNameError\u001b[39m                                 Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[4]\u001b[39m\u001b[32m, line 3\u001b[39m\n\u001b[32m      1\u001b[39m \u001b[38;5;66;03m# Explicit embedding + store setup\u001b[39;00m\n\u001b[32m      2\u001b[39m embed_model = setup_embedding_model(silent=\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[32m----> \u001b[39m\u001b[32m3\u001b[39m retrieval_store = \u001b[43msetup_faiss_store\u001b[49m(chunks)  \u001b[38;5;66;03m# or your wrapper for FAISS\u001b[39;00m\n\u001b[32m      5\u001b[39m result = quick_query(\u001b[32m5\u001b[39m, \u001b[33m\"\u001b[39m\u001b[33mjackson oaks\u001b[39m\u001b[33m\"\u001b[39m, \u001b[33m\"\u001b[39m\u001b[33msmall\u001b[39m\u001b[33m\"\u001b[39m, embed_model, store=retrieval_store)\n",
      "\u001b[31mNameError\u001b[39m: name 'setup_faiss_store' is not defined"
     ]
    }
   ],
   "source": [
    "# Explicit embedding + store setup\n",
    "embed_model = setup_embedding_model(silent=True)\n",
    "retrieval_store = setup_faiss_store(chunks)  # or your wrapper for FAISS\n",
    "\n",
    "result = quick_query(5, \"jackson oaks\", \"small\", embed_model, store=retrieval_store)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e005fee",
   "metadata": {},
   "source": [
    "# Run the model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c4ae8fb0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "🎯 HOA RAG Query System Ready!\n",
      "\n",
      "📋 Available Questions (1-12):\n",
      "  1. How must HOA board elections be conducted under California law?\n",
      "  2. What voting methods are required for board elections?\n",
      "  3. What qualifications are required for board candidates?\n",
      "  4. What notice requirements exist for board meetings?\n",
      "  5. How are proxy votes handled in HOA elections?\n",
      "  6. What constitutes a quorum for member meetings?\n",
      "  7. How long do directors serve on the board?\n",
      "  8. Under what circumstances can a director be removed?\n",
      "  9. What are the assessment collection procedures?\n",
      " 10. How are architectural review requests processed?\n",
      " 11. What enforcement actions can the HOA take for violations?\n",
      " 12. What are the requirements for amending CC&Rs or bylaws?\n",
      "\n",
      "📁 Available HOA Files:\n",
      "   • arroyo park\n",
      "   • camino place\n",
      "   • jackson oaks\n",
      "\n",
      "⚙️ Available Chunk Configs:\n",
      "   • default  → size=800 chars, overlap=200\n",
      "   • small    → size=400 chars, overlap=100\n",
      "   • large    → size=1200 chars, overlap=300\n"
     ]
    }
   ],
   "source": [
    "print(\"🎯 HOA RAG Query System Ready!\")\n",
    "\n",
    "# 📝 Available Questions\n",
    "print(\"\\n📋 Available Questions (1-12):\")\n",
    "for i, q in enumerate(QUESTIONS, 1):\n",
    "    print(f\" {i:2d}. {q}\")\n",
    "\n",
    "# 📁 HOA Files\n",
    "print(\"\\n📁 Available HOA Files:\")\n",
    "for hoa in FILE_MAP.keys():\n",
    "    print(f\"   • {hoa}\")\n",
    "\n",
    "# ⚙️ Chunk Configurations\n",
    "print(\"\\n⚙️ Available Chunk Configs:\")\n",
    "for name, config in CHUNK_CONFIGS.items():\n",
    "    print(f\"   • {name:<8} → size={config['size']} chars, overlap={config['overlap']}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6e345fcf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "📌 Q1 Answer: Unit(s) may not serve on the Board at the same time. \n",
      "5.3 \n",
      "Nomination. Nominations of candidates to the Board of Directors \n",
      "may be made by a nominating committee or by self-nomination. All nominations \n",
      "shall be conducted in accordance with Rules adopted pursuant to Civil Code \n",
      "section 5105. The Board may recruit qualified candidates and/or appoint a \n",
      "Nominating Committee prior to any election of Directors. The Nominating \n",
      "Committee, if one is appointed, shall consist of a chairman, who shall be a \n",
      "Hughes Gill Cochrane, P.C .• 1600 South Main Street, Suite 215 • Walnut Creek, California 94596 • 925-926-1200 \n",
      "AMENDED AND RESTATED BYLAWS \n",
      "CAMINO PLACE HOMEOWNERS ASSOCIATION \n",
      "6 \n",
      "Director, and two or more Members of the Association. The Nominating\n",
      "🔍 Q1 Score: 0.26666666666666666\n",
      "\n",
      "📌 Q5 Answer: amended as set forth below: \n",
      "Section 3.02. Election; Tenure; Vacancies. \n",
      "(a) \n",
      "At each annual meeting the members shall by simple majority vote of those \n",
      "present in person or by proxy by secret ballot, or by a simple majority vote of the \n",
      "members by secret ballot conducted by mail, in accordance with applicable provisions\n",
      "🔍 Q5 Score: 0.125\n",
      "\n",
      "📌 Q7 Answer: ARTICLE 5 - BOARD OF DIRECTORS; ELECTION; TERM OF OFFICE\n",
      "5.2 Qualifications for Candidates. Candidates for the Board: (i) must be Members in Good Standing, or, in the case of a Member in Good Standing that is an entity, an officer, director, principal, or authorized representative of the entity; (ii) may not have been declared of unsound mind by a final order of court; and (iii) may not have been convicted of a felony.\n",
      "\n",
      "5.4 Election. Directors shall be elected annually by secret ballot in accordance with Civil Code sections 5100 through 5135 and Rules adopted pursuant thereto.\n",
      "\"\"\"\n",
      "\n",
      "# Compliance test questions\n",
      "]\n",
      "\n",
      "def setup_embeddings():\n",
      "    \"\"\"Setup different embedding models for testing\"\"\"\n",
      "    models = {}\n",
      "    \n",
      "    # Test different embedding models\n",
      "    embedding_configs = [\n",
      "        (\"MiniLM-L6\", \"sentence-transformers/all-MiniLM-L6-v2\"),\n",
      "        (\"MiniLM-L12\", \"sentence-transformers/all-MiniLM-L12-v2\"),\n",
      "        (\"MPNet-base\", \"sentence-transformers/all-mpnet-base-v2\"),\n",
      "    ]\n",
      "    \n",
      "    for name, model_id in embedding_configs:\n",
      "        try:\n",
      "            models[name] = HuggingFaceEmbeddings(\n",
      "                model_name=model_id,\n",
      "🔍 Q7 Score: 0.16666666666666666\n"
     ]
    }
   ],
   "source": [
    "# 📦 Load embedding model silently\n",
    "embed_model = setup_embedding_model(silent=True)\n",
    "\n",
    "# 📌 Run compliance queries using FAISS + E5\n",
    "result1 = quick_query(1, \"camino place\", \"default\", embed_model)\n",
    "result2 = quick_query(5, \"jackson oaks\", \"small\", embed_model)\n",
    "result3 = quick_query(7, \"arroyo park\", \"large\", embed_model)\n",
    "\n",
    "# 📤 Display answers and relevance scores\n",
    "print(\"📌 Q1 Answer:\", result1[\"answer\"])\n",
    "print(\"🔍 Q1 Score:\", result1[\"score\"])\n",
    "print(\"\\n📌 Q5 Answer:\", result2[\"answer\"])\n",
    "print(\"🔍 Q5 Score:\", result2[\"score\"])\n",
    "print(\"\\n📌 Q7 Answer:\", result3[\"answer\"])\n",
    "print(\"🔍 Q7 Score:\", result3[\"score\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "768a0e77",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "🎯 HOA RAG Query System Ready!\n",
      "\n",
      "📋 Available Questions (1-12):\n",
      " 1. How must HOA board elections be conducted under California law?\n",
      " 2. What voting methods are required for board elections?\n",
      " 3. What qualifications are required for board candidates?\n",
      " 4. What notice requirements exist for board meetings?\n",
      " 5. How are proxy votes handled in HOA elections?\n",
      " 6. What constitutes a quorum for member meetings?\n",
      " 7. How long do directors serve on the board?\n",
      " 8. Under what circumstances can a director be removed?\n",
      " 9. What are the assessment collection procedures?\n",
      "10. How are architectural review requests processed?\n",
      "11. What enforcement actions can the HOA take for violations?\n",
      "12. What are the requirements for amending CC&Rs or bylaws?\n",
      "\n",
      "📁 Available HOA Files:\n",
      "   • arroyo park\n",
      "   • camino place\n",
      "   • jackson oaks\n",
      "\n",
      "🚀 Usage:\n",
      "embed_model = quick_setup()\n",
      "result = query_hoa_by_number(QUESTION_NUMBER, 'HOA_NAME', embed_model)\n",
      "answer = result['top_result']['content']\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "EXAMPLES:\n",
    "\"\"\"\n",
    "# Ask question 1 from camino place HOA document\n",
    "# result = query_hoa_by_number(1, \"camino place\", embed_model)\n",
    "\n",
    "# Ask question 5 (proxy votes) from jackson oaks HOA document  \n",
    "# result = query_hoa_by_number(5, \"jackson oaks\", embed_model)\n",
    "\n",
    "# Ask question 7 (director terms) from arroyo park HOA document\n",
    "# result = query_hoa_by_number(7, \"arroyo park\", embed_model)\n",
    "\n",
    "# Get just the answer text:\n",
    "# print(result['top_result']['content'])\n",
    "\n",
    "print(\"🎯 HOA RAG Query System Ready!\")\n",
    "print(\"\\n📋 Available Questions (1-12):\")\n",
    "for i, q in enumerate(QUESTIONS, 1):\n",
    "    print(f\"{i:2d}. {q}\")\n",
    "\n",
    "print(\"\\n📁 Available HOA Files:\")\n",
    "print(\"   • arroyo park\")  \n",
    "print(\"   • camino place\")\n",
    "print(\"   • jackson oaks\")\n",
    "\n",
    "print(\"\\n🚀 Usage:\")\n",
    "print(\"embed_model = quick_setup()\")\n",
    "print(\"result = query_hoa_by_number(QUESTION_NUMBER, 'HOA_NAME', embed_model)\")\n",
    "print(\"answer = result['top_result']['content']\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
